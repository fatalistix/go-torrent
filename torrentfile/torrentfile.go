package torrentfile

import (
	"bytes"
	"crypto/sha1"
	"fmt"
	"io"
	"net/url"
	"strconv"

	bencode "github.com/jackpal/bencode-go"
)

// Port is the port number this peer is listening on. Common behavior is for a downloader to try to listen on port
// 6881 and if that port is taken try 6882, then 6883, etc. and give up after 6889.
const Port uint16 = 6881

// TorrentFile encodes the metadata from a .torrent file. After encoding it becomes a representation of it
type TorrentFile struct {
	Announce     string
	Name         string
	PiecesHashes [][20]byte
	PieceLength  int
	Length       int
	InfoHash     [20]byte
}

type bencodeInfo struct {
	Pieces       string `bencode:"pieces"`
	Name         string `bencode:"name"`
	PiecesLength int    `bencode:"piece length"`
	Length       int    `bencode:"length"`
}

type bencodeTorrent struct {
	Announce string      `bencode:"announce"`
	Info     bencodeInfo `bencode:"info"`
}

func (tf *TorrentFile) buildTrackerURL(peerID [20]byte, port uint16) (string, error) {
	base, err := url.Parse(tf.Announce)
	if err != nil {
		return "", err
	}
	params := url.Values{
		// info_hash - id of file we want to download. Hash, that was recently generated by map `info`. Tracker needs
		// to know this hash to show us correct peers
		"info_hash": []string{string(tf.InfoHash[:])},
		// 20-byte name, that identificates us on tracker for other peers.
		// TODO: Replace with real id like `-TR2940-k8hj0wgej6ch`, where encoded used program and it's version. In that
		// Example, TR2940 is a Transmission v2.94 client
		"peer_id":    []string{string(peerID[:])},
		"port":       []string{strconv.Itoa(int(Port))},
		"uploaded":   []string{"0"},
		"downloaded": []string{"0"},
		"compact":    []string{"1"},
		"left":       []string{strconv.Itoa(tf.Length)},
	}
	base.RawQuery = params.Encode()
	return base.String(), nil
}

func (bi *bencodeInfo) hash() ([20]byte, error) {
	var buf bytes.Buffer
	err := bencode.Marshal(&buf, *bi)
	if err != nil {
		return [20]byte{}, err
	}
	h := sha1.Sum(buf.Bytes())
	return h, nil
}

func (bi *bencodeInfo) splitPieceHashes() ([][20]byte, error) {
	hashLen := sha1.Size
	buf := []byte(bi.Pieces)
	if len(buf)%hashLen != 0 {
		err := fmt.Errorf("received malformed pieces of length %d", len(buf))
		return nil, err
	}
	numHashes := len(buf) / hashLen
	hashes := make([][20]byte, numHashes)

	for i := 0; i < numHashes; i++ {
		copy(hashes[i][:], buf[i*hashLen:(i+1)*hashLen])
	}
	return hashes, nil
}

func (bto *bencodeTorrent) toTorrentFile() (*TorrentFile, error) {
	infoHash, err := bto.Info.hash()
	if err != nil {
		return nil, err
	}
	pieceHashes, err := bto.Info.splitPieceHashes()
}

func Open(r io.Reader) (*bencodeTorrent, error) {
	bto := bencodeTorrent{}
	err := bencode.Unmarshal(r, &bto)
	if err != nil {
		return nil, err
	}
	return &bto, nil
}
